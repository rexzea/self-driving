import pygame
import random
import sys
import math


pygame.init()

SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
WORLD_WIDTH = 1000  
WORLD_HEIGHT = 1500  
FPS = 60

WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (220, 20, 60)
BLUE = (30, 144, 255)
YELLOW = (255, 255, 0)
GRAY = (128, 128, 128)
GREEN = (0, 255, 0)



CAR_WIDTH = 40
CAR_HEIGHT = 60
CAR_SPEED = 2
TURN_SPEED = 1

NUM_TRAFFIC_CARS = 25  
TRAFFIC_SPEED_MIN = 0
TRAFFIC_SPEED_MAX = 1

SENSOR_LENGTH = 200
NUM_SENSORS = 30

SENSOR_ANGLES = [-100, -80, -60, -30, 0, 30, 60, 80, 100] 
NUM_SENSORS = len(SENSOR_ANGLES)

COLORS = {
    'sky': (135, 206, 235),
    'grass': (34, 139, 34),
    'road': (64, 64, 64),
    'road_shoulder': (96, 96, 96),
    'lane_marks': (255, 255, 255),
    'player_body': (30, 144, 255), 
    'player_window': (173, 216, 230), 
    'player_lights': (255, 215, 0),  
    'traffic_car_1': (220, 20, 60), 
    'traffic_car_2': (255, 69, 0),  
    'traffic_car_3': (178, 34, 34),  
    'sensor': (255, 255, 255, 128)   
}


class Camera:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.x = 0
        self.y = 0
        
    def follow(self, target):
        target_x = -target.x + SCREEN_WIDTH/2
        target_y = -target.y + SCREEN_HEIGHT/2

        self.x += (target_x - self.x) * 0.1
        self.y += (target_y - self.y) * 0.1
        
    def apply(self, entity):
        return (entity.rect.x + self.x, entity.rect.y + self.y)

class Car:
    def __init__(self, x, y, is_player=True):
        self.x = x
        self.y = y
        self.speed = CAR_SPEED if is_player else random.uniform(TRAFFIC_SPEED_MIN, TRAFFIC_SPEED_MAX)
        self.rect = pygame.Rect(x, y, CAR_WIDTH, CAR_HEIGHT)
        self.is_player = is_player
        self.angle = 0
        self.sensors = []
        self.sensor_readings = [SENSOR_LENGTH] * NUM_SENSORS
        self.turning = 0
        self.safe_distance = SENSOR_LENGTH * 0.7  
        self.color = BLUE if is_player else RED
        self.drift_offset = 0
        self.last_turn_direction = 0
        self.danger_level = 0  
        self.car_type = random.randint(1, 3) if not is_player else 0
        self.shadow_offset = 5
        self.glow_radius = 0
        self.brake_light_alpha = 0
        
    def move(self, obstacles):
        if self.is_player:
            self._move_player(obstacles)
        else:
            self._move_traffic()
        
        self.rect.x = self.x
        self.rect.y = self.y
        
    def _move_player(self, obstacles):


        
        self.update_sensors(obstacles)
        
        front_sensor = self.sensor_readings[1]
        left_sensor = self.sensor_readings[0]
        right_sensor = self.sensor_readings[4]
        
        self.turning = 0
        
        if front_sensor < self.safe_distance:
            if left_sensor > right_sensor and left_sensor > CAR_WIDTH * 2:
                self.turning = -1
            elif right_sensor > left_sensor and right_sensor > CAR_WIDTH * 2:
                self.turning = 1
            else:
                self.speed = max(1, self.speed - 0.1)
        else:
            if left_sensor < self.safe_distance * 0.1:
                self.turning = 1
            elif right_sensor < self.safe_distance * 0.1:
                self.turning = -1
            else:
                self.speed = min(CAR_SPEED, self.speed + 0.2)

        if self.turning != 0:
            self.drift_offset += self.turning * 0.5
            self.drift_offset = max(-20, min(20, self.drift_offset))
        else:
            self.drift_offset *= 0.9
        
        self.x += self.drift_offset * 0.1
        self.angle = -self.drift_offset * 2  
    
        self.y -= self.speed
 
        if self.y < 0:
            self.y = WORLD_HEIGHT - CAR_HEIGHT
        elif self.y > WORLD_HEIGHT:
            self.y = 0
  
        self.x = max(0, min(self.x, WORLD_WIDTH - CAR_WIDTH))

    def _move_traffic(self):

        self.y += self.speed

        if self.y > WORLD_HEIGHT:
            self.reset_traffic_position()
    
    def reset_traffic_position(self):
        self.y = -CAR_HEIGHT
        self.x = random.randint(10, WORLD_WIDTH - CAR_WIDTH)
        self.speed = random.uniform(TRAFFIC_SPEED_MIN, TRAFFIC_SPEED_MAX)

    def update_sensors(self, obstacles):
        if not self.is_player:
            return
            
        self.sensors = []
        sensor_angles = [-45, -10, 10, 45]
        
        for i, angle in enumerate(sensor_angles):
            angle_rad = math.radians(angle + self.angle)
            start_x = self.x + CAR_WIDTH/2
            start_y = self.y + CAR_HEIGHT/2
            end_x = start_x + math.sin(angle_rad) * SENSOR_LENGTH
            end_y = start_y - math.cos(angle_rad) * SENSOR_LENGTH
            
            self.sensors.append(((start_x, start_y), (end_x, end_y)))
            
            min_distance = SENSOR_LENGTH
            
            for obstacle in obstacles:
                if obstacle == self:
                    continue
                    
                obstacle_center_x = obstacle.rect.centerx
                obstacle_center_y = obstacle.rect.centery
                
                dx = obstacle_center_x - start_x
                dy = obstacle_center_y - start_y
                distance = math.sqrt(dx*dx + dy*dy)
                
                if distance < min_distance:
                    obstacle_angle = math.degrees(math.atan2(dx, -dy))
                    if abs(obstacle_angle - (angle + self.angle)) < 30:
                        min_distance = distance - CAR_WIDTH/2
            
            self.sensor_readings[i] = max(0, min_distance)

    def draw(self, screen, camera):
        pos = camera.apply(self)

        car_surface = pygame.Surface((CAR_WIDTH + 10, CAR_HEIGHT + 10), pygame.SRCALPHA)

        pygame.draw.rect(car_surface, self.color, 
                        (5, 5, CAR_WIDTH, CAR_HEIGHT))
        
        if self.is_player:
            pygame.draw.polygon(car_surface, BLUE,
                              [(5, 20), (CAR_WIDTH+5, 20), 
                               (CAR_WIDTH-5, 5), (15, 5)])
            pygame.draw.circle(car_surface, YELLOW, (10, CAR_HEIGHT), 5)
            pygame.draw.circle(car_surface, YELLOW, (CAR_WIDTH, CAR_HEIGHT), 5)

        rotated_car = pygame.transform.rotate(car_surface, self.angle)
        screen.blit(rotated_car, (pos[0] - rotated_car.get_width()/2, 
                                 pos[1] - rotated_car.get_height()/2))

        if self.is_player:
            for i, sensor in enumerate(self.sensors):
                start_pos = (sensor[0][0] + camera.x, sensor[0][1] + camera.y)
                end_pos = (sensor[1][0] + camera.x, sensor[1][1] + camera.y)
                intensity = min(255, int(255 * self.sensor_readings[i] / SENSOR_LENGTH))
                sensor_color = (255, intensity, intensity)
                pygame.draw.line(screen, sensor_color, start_pos, end_pos, 0)
    

    

def draw_world(screen, camera):
    for y in range(SCREEN_HEIGHT):
        progress = y / SCREEN_HEIGHT
        sky_color = [
            int(COLORS['sky'][i] * (1 - progress * 0.3))
            for i in range(3)
        ]
        pygame.draw.line(screen, sky_color, (0, y), (SCREEN_WIDTH, y))

    road_width = 800
    road_start = (WORLD_WIDTH - road_width) // 2

    road_rect = pygame.Rect(road_start + camera.x, camera.y, 
                           road_width, WORLD_HEIGHT)
    pygame.draw.rect(screen, GRAY, road_rect)

    lane_width = road_width // 3
    for i in range(1, 3):
        x = road_start + i * lane_width + camera.x
        for y in range(0, WORLD_HEIGHT, 1000000000000):
            y_pos = y + camera.y
            if -50 <= y_pos <= SCREEN_HEIGHT:
                pygame.draw.rect(screen, WHITE, (x-2, y_pos, 4, 50))













    
    #roadside
    pygame.draw.rect(screen, GREEN, (road_start - 50 + camera.x, camera.y, 
                                   40, WORLD_HEIGHT))
    pygame.draw.rect(screen, GREEN, (road_start + road_width + 10 + camera.x, 
                                   camera.y, 40, WORLD_HEIGHT))
    
        #grass with texture
    for y in range(0, WORLD_HEIGHT, 50):
        y_pos = y + camera.y
        if -50 <= y_pos <= SCREEN_HEIGHT:
            grass_color = (
                COLORS['grass'][0] + random.randint(-10, 10),
                COLORS['grass'][1] + random.randint(-10, 10),
                COLORS['grass'][2] + random.randint(-10, 10)
            )
            pygame.draw.rect(screen, grass_color,
                           (0, y_pos, road_start + camera.x, 50))
            pygame.draw.rect(screen, grass_color,
                           (road_start + road_width + camera.x, y_pos,
                            WORLD_WIDTH - (road_start + road_width), 50))
            
        # road with shoulder
    road_rect = pygame.Rect(road_start + camera.x, camera.y, road_width, WORLD_HEIGHT)
    pygame.draw.rect(screen, COLORS['road'], road_rect)


        # road shoulders
    shoulder_width = 10
    pygame.draw.rect(screen, COLORS['road_shoulder'],
                    (road_start + camera.x, camera.y, shoulder_width, WORLD_HEIGHT))
    pygame.draw.rect(screen, COLORS['road_shoulder'],
                    (road_start + road_width - shoulder_width + camera.x, camera.y,
                     shoulder_width, WORLD_HEIGHT))
    

        #lane markings with animation
    lane_width = road_width // 3
    time_offset = pygame.time.get_ticks() / 1000.0
    for i in range(1, 3):
        x = road_start + i * lane_width + camera.x
        for y in range(0, WORLD_HEIGHT, 100):
            y_pos = (y + time_offset * 200) % WORLD_HEIGHT + camera.y
            if -50 <= y_pos <= SCREEN_HEIGHT:
                # animated dash lentgh based on car speed
                dash_length = 50 + math.sin(time_offset * 2) * 5
                pygame.draw.rect(screen, COLORS['lane_marks'],
                               (x-2, y_pos, 4, dash_length))
                
    

    
                

def main():
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    pygame.display.set_caption("Rexzea Self-Driving Car Simulation")
    clock = pygame.time.Clock()
    
    # camera
    camera = Camera(SCREEN_WIDTH, SCREEN_HEIGHT)
    
    # player car
    player = Car(WORLD_WIDTH/2, WORLD_HEIGHT - CAR_HEIGHT - 20)
    
    # traffic cars
    traffic_cars = [Car(random.randint(0, WORLD_WIDTH - CAR_WIDTH),
                       random.randint(-WORLD_HEIGHT, 0),
                       is_player=False) for _ in range(NUM_TRAFFIC_CARS)]
    
    # all cars list
    all_cars = [player] + traffic_cars
    
    # score trcaking
    score = 0
    font = pygame.font.Font(None, 36)
    
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    # reset game
                    player = Car(WORLD_WIDTH/2, WORLD_HEIGHT - CAR_HEIGHT - 20)
                    traffic_cars = [Car(random.randint(0, WORLD_WIDTH - CAR_WIDTH),
                                     random.randint(-WORLD_HEIGHT, 0),
                                     is_player=False) for _ in range(NUM_TRAFFIC_CARS)]
                    all_cars = [player] + traffic_cars
                    score = 0
        
        # updt (tes0.1.py)
        player.move(all_cars)
        for car in traffic_cars:
            car.move(all_cars)
            
            # collision detection
            if player.rect.colliderect(car.rect):
                game_over_text = font.render(f"Game Over! Score: {score} - Press SPACE to restart", 
                                          True, WHITE)
                screen.blit(game_over_text, 
                          (SCREEN_WIDTH/2 - game_over_text.get_width()/2, 
                           SCREEN_HEIGHT/2))
                pygame.display.flip()
                
                waiting = True
                while waiting:
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            running = False
                            waiting = False
                        elif event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
                            player = Car(WORLD_WIDTH/2, WORLD_HEIGHT - CAR_HEIGHT - 20)
                            traffic_cars = [Car(random.randint(0, WORLD_WIDTH - CAR_WIDTH),
                                             random.randint(-WORLD_HEIGHT, 0),
                                             is_player=False) 
                                         for _ in range(NUM_TRAFFIC_CARS)]
                            all_cars = [player] + traffic_cars
                            score = 0
                            waiting = False
                continue
        
        #camera follow player
        camera.follow(player)
        
        # updt score
        score += 1
        
        # Draw
        screen.fill(BLACK)
        draw_world(screen, camera)
        
        #all cars
        for car in all_cars:
            car.draw(screen, camera)
        
        #score
        score_text = font.render(f"Score: {score}", True, WHITE)
        screen.blit(score_text, (10, 10))
        
        pygame.display.flip()
        clock.tick(FPS)
    
    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()